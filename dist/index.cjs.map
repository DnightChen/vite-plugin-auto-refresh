{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { PluginOption } from 'vite';\r\nimport fs from 'node:fs';\r\n\r\ninterface Config {\r\n  fileName?: string;\r\n  outDir?: string;\r\n  dts?: string;\r\n  isDev?: boolean;\r\n  change?: () => void;\r\n}\r\n\r\nconst defaultConfig = {\r\n  fileName: 'manifest',\r\n  outDir: 'public',\r\n  dts: 'src/utils/pinia-auto-refresh.ts',\r\n  isDev: false,\r\n};\r\n\r\nexport default function (config: Config = {}): PluginOption {\r\n  const options = { ...defaultConfig, ...config };\r\n  const { fileName, isDev, outDir } = options;\r\n  const start = process.env.NODE_ENV !== 'development' || isDev;\r\n  return {\r\n    name: 'auto-refresh',\r\n    writeBundle(options) {\r\n      const buildPath = options.dir || '';\r\n      const outPath = `${buildPath}/${outDir}/${fileName}.json`;\r\n      if (!fs.existsSync(buildPath)) fs.mkdirSync(buildPath);\r\n      fs.writeFileSync(outPath, new Date().getTime().toString());\r\n      console.log(`AutoRefresh completed and saved as ${fileName}.json`);\r\n    },\r\n    transformIndexHtml(html: string) {\r\n      if (!start) return;\r\n      const insertIndex = html.lastIndexOf('</html>') - 9;\r\n      const insertContent = `\r\n      <style>\r\n        #autorefresh {\r\n          width: 480px;\r\n          border: none !important;\r\n          box-shadow: none !important;\r\n          outline:none !important;\r\n          border-radius: 10px;\r\n          background-color: #fff;\r\n          padding: 32px;\r\n        }\r\n        #autorefresh .dialog-header {\r\n          display: flex;\r\n          flex-flow: row nowrap;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          font-weight: bold;\r\n        }\r\n        #autorefresh .dialog-icon {\r\n          width: 1em;\r\n          height: 1em;\r\n          cursor: pointer;\r\n          transition: 0.3s;\r\n        }\r\n        #autorefresh .dialog-icon:hover {\r\n          background-color: #f3f3f3;\r\n        }\r\n        #autorefresh .dialog-body {\r\n          padding: 16px 0;\r\n          font-weight: 300;\r\n          font-size: 14px;\r\n        }\r\n        #autorefresh .dialog-footer {\r\n          padding-top: 16px;\r\n          display: flex;\r\n          flex-flow: row nowrap;\r\n          justify-content: flex-end;\r\n        }\r\n        #autorefresh .dialog-footer > * {\r\n          margin-left: 8px;\r\n        }\r\n        #autorefresh .dialog-btn {\r\n          height: 32px;\r\n          padding: 0 16px;\r\n          cursor: pointer;\r\n          background-color: #e8e8e8;\r\n          border-radius: 3px;\r\n          display: flex;\r\n          flex-flow: row nowrap;\r\n          align-items: center;\r\n          justify-content: center;\r\n          color: rgba(0, 0, 0, 0.9);\r\n          transition: 0.2s;\r\n          font-size: 14px;\r\n        }\r\n        #autorefresh .dialog-btn:hover {\r\n          background-color: #ddd;\r\n        }\r\n        #autorefresh .dialog-confirm {\r\n          background-color: #0052d9;\r\n          color: #fff;\r\n        }\r\n        #autorefresh .dialog-confirm:hover {\r\n          background-color: #366ef4;\r\n        }\r\n        #autorefresh::backdrop {\r\n          background-color: rgba(0, 0, 0, 0.6);\r\n        }\r\n      </style>\r\n      <dialog id='autorefresh'>\r\n        <div class='autorefresh-dialog'>\r\n          <div class='dialog-header'>\r\n            更新提示\r\n            <svg fill=\"none\" viewBox=\"0 0 24 24\" width=\"1em\" height=\"1em\" class=\"dialog-icon\" onclick='autorefresh.close();'>\r\n              <path fill=\"currentColor\" d=\"M7.05 5.64L12 10.59l4.95-4.95 1.41 1.41L13.41 12l4.95 4.95-1.41 1.41L12 13.41l-4.95 4.95-1.41-1.41L10.59 12 5.64 7.05l1.41-1.41z\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class='dialog-body'>检测到系统有更新，是否刷新页面？</div>\r\n          <div class='dialog-footer'>\r\n            <div class='dialog-btn dialog-default'>不再提醒</div>\r\n            <div class='dialog-btn dialog-confirm' onclick='location.reload();'>刷新</div>\r\n          </div>\r\n        </div>\r\n      </dialog>\r\n      <script>\r\n        const url = './${outDir}/${fileName}.json';\r\n        function createWorker(f) {\r\n          const blob = new Blob([\"(\" + f.toString() + \")()\"]);\r\n          const url = window.URL.createObjectURL(blob);\r\n          const worker = new Worker(url);\r\n          return worker;\r\n        }\r\n        const pollingWorker = createWorker(() => {\r\n          self.onmessage = (message) => {\r\n            let timestamp = \"\";\r\n            let hasChange = false;\r\n            setInterval(() => {\r\n              // 检测前端资源是否有更新\r\n              fetch(message.data + \"?v=\" + new Date().getTime(), {\r\n                method: \"get\",\r\n              })\r\n                .then((res) => res.json())\r\n                .then((res) => {\r\n                  if (!timestamp) {\r\n                    timestamp = res.timestamp;\r\n                  } else if (timestamp !== res.timestamp && !hasChange) {\r\n                    hasChange = true;\r\n                    self.postMessage(true);\r\n                  }\r\n                }).catch(()=>{\r\n                  hasChange = true;\r\n                  self.postMessage(true)\r\n                });\r\n            }, 5000);\r\n          };\r\n        });\r\n        pollingWorker.onmessage = (message) => {\r\n          if (message) {\r\n            autorefresh.showModal();\r\n          }\r\n        };\r\n        pollingWorker.postMessage(url);\r\n\r\n        document.querySelector(\".dialog-default\").onclick = () => {\r\n          pollingWorker.terminate();\r\n          autorefresh.close();\r\n        };\r\n      </script>\r\n      `;\r\n      return (\r\n        html.slice(0, insertIndex) + insertContent + html.slice(insertIndex)\r\n      );\r\n    },\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAe;AAUf,IAAM,gBAAgB;AAAA,EACpB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,OAAO;AACT;AAEe,SAAR,YAAkB,SAAiB,CAAC,GAAiB;AAC1D,QAAM,UAAU,EAAE,GAAG,eAAe,GAAG,OAAO;AAC9C,QAAM,EAAE,UAAU,OAAO,OAAO,IAAI;AACpC,QAAM,QAAQ,QAAQ,IAAI,aAAa,iBAAiB;AACxD,SAAO;AAAA,IACL,MAAM;AAAA,IACN,YAAYA,UAAS;AACnB,YAAM,YAAYA,SAAQ,OAAO;AACjC,YAAM,UAAU,GAAG,aAAa,UAAU;AAC1C,UAAI,CAAC,eAAAC,QAAG,WAAW,SAAS;AAAG,uBAAAA,QAAG,UAAU,SAAS;AACrD,qBAAAA,QAAG,cAAc,UAAS,oBAAI,KAAK,GAAE,QAAQ,EAAE,SAAS,CAAC;AACzD,cAAQ,IAAI,sCAAsC,eAAe;AAAA,IACnE;AAAA,IACA,mBAAmB,MAAc;AAC/B,UAAI,CAAC;AAAO;AACZ,YAAM,cAAc,KAAK,YAAY,SAAS,IAAI;AAClD,YAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAqFH,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4C7B,aACE,KAAK,MAAM,GAAG,WAAW,IAAI,gBAAgB,KAAK,MAAM,WAAW;AAAA,IAEvE;AAAA,EACF;AACF;","names":["options","fs"]}